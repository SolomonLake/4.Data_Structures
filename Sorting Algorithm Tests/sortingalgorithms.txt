import numpy as np
import sys
import time
import random

# Return 1000 random integers from the “discrete uniform” distribution
# in the “half-open” interval [0, 500)
seq = np.random.randint(0, 500, size=1000)

# Modify a sequence in-place by shuffling its contents
np.random.shuffle(a)

for i in range (1, 7):
	list_of_lists = [[], [], [], [], [], [], []]
	for i in range (0, 10^i):
		item = randint(0, 10^i)
		append.list_of_lists[i].item

print quicksort(list_of_lists[0])
print mergesort(list_of_lists[0])

def exch(a, i, j):
	swap = a[i]
	a[i] = a[j]
	a[j] = swap

def partition(a, lo, hi):
	i = lo + 1
	j = hi
	while 1:
		while i <= j and a[i] <= a[lo]:
			i += 1
		while i <= j and a[lo] <= a[j]:
			j -= 1
		if i > j:
			break
		exch(a, i, j)
	exch(a, lo, j)
	return j

def quick(a, lo, hi):
	if hi <= lo:
		return
	j = partition(a, lo, hi)
	quick(a, lo, j-1)
	quick(a, j+1, hi)

def quicksort(a):
	random.shuffle(a)
	quick(a, 0, len(a)-1)

def merge(a, aux, lo, mid, hi):
	for k in range(lo, hi+1):
		aux[k] = a[k]
	i = lo
	j = mid + 1
	for k in range(lo, hi+1):
		if i > mid:
			a[k] = aux[j]
			j += 1
		elif j > hi:
			a[k] = aux[i]
			i += 1
		elif aux[j] < aux[i]:
			a[k] = aux[j]
			j += 1
		else:
			a[k] = aux[i]
			i += 1

def sort(a, aux, lo, hi):
	if hi <= lo:
		return
	mid = lo + (hi-lo)/2
	sort(a, aux, lo, mid)
	sort(a, aux, mid+1, hi)
	merge(a, aux, lo, mid, hi)

def mergesort(a):
	aux = [0] * len(a)
	sort(a, aux, 0, len(a)-1)

if __name__ == "__main__":
	# generate sequence
	original_seq = range(int(sys.argv[1]))
	random.shuffle(original_seq)
	seq = list(original_seq)
	# print original sequence if needed
	if int(sys.argv[2]):
		print seq
	# apply mergesort
	print 'Running mergesort ...'
	start = time.clock()
	mergesort(seq)
	end = time.clock()
	# print sorted sequence if needed
	if int(sys.argv[2]):
		print seq
	print 'Elapsed time:', end-start
	print 'Results correct?', seq==range(int(sys.argv[1]))
	#######################################################
	# print original sequence if needed
	seq = list(original_seq)
	if int(sys.argv[2]):
		print seq
	# apply quicksort
	print 'Running quicksort ...'
	start = time.clock()
	quicksort(seq)
	end = time.clock()
	# print sorted sequence if needed
	if int(sys.argv[2]):
		print seq
	print 'Elapsed time:', end-start
	print 'Results correct?', seq==range(int(sys.argv[1]))
